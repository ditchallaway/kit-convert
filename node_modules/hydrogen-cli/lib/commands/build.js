"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
const compiler_1 = require("../services/compiler");
const file_1 = require("../services/file");
const checkFolder_1 = require("../helpers/checkFolder");
const log_1 = require("../helpers/log");
const service_worker_1 = require("../services/service_worker");
class Build extends command_1.Command {
    async run() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const { flags: { dev } } = this.parse(Build);
        const config = await file_1.getConfig();
        const hooks = await file_1.getHooks();
        await log_1.logBuildMode(dev);
        if ((_b = (_a = config) === null || _a === void 0 ? void 0 : _a.build) === null || _b === void 0 ? void 0 : _b.deleteFolder) {
            await ((_e = (_c = hooks) === null || _c === void 0 ? void 0 : (_d = _c).beforeDistRemoved) === null || _e === void 0 ? void 0 : _e.call(_d, { dev, config }));
            console.log('Deleting [dist] folder before build');
            await file_1.deleteDistFolder();
            await ((_h = (_f = hooks) === null || _f === void 0 ? void 0 : (_g = _f).afterDistRemoved) === null || _h === void 0 ? void 0 : _h.call(_g, { dev, config }));
        }
        if (!await checkFolder_1.doFoldersExist()) {
            return false;
        }
        await ((_l = (_j = hooks) === null || _j === void 0 ? void 0 : (_k = _j).beforeBuild) === null || _l === void 0 ? void 0 : _l.call(_k, { dev, config }));
        cli_ux_1.default.action.start('Building files');
        console.time('Build time');
        const htmlPages = await compiler_1.build(dev, config);
        await file_1.saveHTMLToFiles(htmlPages);
        await Promise.all([
            file_1.copyStaticFolder(config.staticFolder),
            file_1.copyExtraStaticFiles(config.extraStaticFiles),
            service_worker_1.generateSW(config.sw, dev),
        ]);
        cli_ux_1.default.action.stop();
        console.timeEnd('Build time');
        await ((_p = (_m = hooks) === null || _m === void 0 ? void 0 : (_o = _m).afterBuild) === null || _p === void 0 ? void 0 : _p.call(_o, { dev, config }));
    }
}
exports.Build = Build;
Build.description = 'Starts building templates for production';
Build.flags = {
    dev: command_1.flags.boolean({
        default: false,
        description: 'Enable development mode for your builds',
    }),
};
