"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const js_beautify_1 = tslib_1.__importDefault(require("js-beautify"));
const path_1 = require("path");
const file_1 = require("../file");
const glob_1 = tslib_1.__importDefault(require("../../helpers/glob"));
const CWD = process.cwd();
const SW_DEFAULT_TEMPLATE = 'sw.js';
exports.generateSW = async (sw = SW_DEFAULT_TEMPLATE, dev) => {
    var _a, _b, _c, _d, _e;
    const hooks = await file_1.getHooks();
    const [pages, swFile] = await Promise.all([
        glob_1.default('dist/**/*.html'),
        file_1.getServiceWorker(sw),
    ]);
    const { version: cacheVersion } = await fs_extra_1.default.readJSON(path_1.normalize(`${CWD}/package.json`));
    // @ts-ignore
    const paths = pages.map((page) => {
        const path = page.replace('dist', '').split('/');
        const filename = path.pop();
        const route = path.join('/') || '/';
        return {
            route,
            filename,
            index: filename === 'index.html',
            depth: path.length - 1,
        };
    }).sort((a, b) => a.depth - b.depth);
    const options = await ((_c = (_a = hooks) === null || _a === void 0 ? void 0 : (_b = _a).beforeServiceWorkerGenerated) === null || _c === void 0 ? void 0 : _c.call(_b, {
        routes: paths,
        swFile,
        cacheVersion,
        dev,
    }));
    const serviceWorker = `
    const DEV = ${JSON.stringify(dev)};
    ${((_d = options) === null || _d === void 0 ? void 0 : _d.removeDefaults) ? '' : `
        const CACHE_VERSION = ${JSON.stringify(cacheVersion)};
        const routes = ${JSON.stringify(paths, null, 3)}; 
      `}
    ${((_e = options) === null || _e === void 0 ? void 0 : _e.inject) || ''}
    ${swFile}
  `;
    const cleanUpFile = js_beautify_1.default(serviceWorker, { indent_size: 2, keep_array_indentation: true });
    return fs_extra_1.default.outputFile(path_1.normalize(`${CWD}/dist/${sw}`), cleanUpFile).then(async () => {
        var _a, _b, _c;
        await ((_c = (_a = hooks) === null || _a === void 0 ? void 0 : (_b = _a).afterServiceWorkerGenerated) === null || _c === void 0 ? void 0 : _c.call(_b, { dev, cacheVersion }));
    });
};
