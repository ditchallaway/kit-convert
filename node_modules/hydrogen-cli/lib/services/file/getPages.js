"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = require("path");
const glob_1 = tslib_1.__importDefault(require("../../helpers/glob"));
const CWD = process.cwd();
const PATTERN = 'pages/**/*.js';
const FILE = 'hydrogen.routes.js';
exports.getPagesPaths = async () => glob_1.default(PATTERN);
exports.getRoutes = async () => {
    if (!await fs_extra_1.default.pathExists(path_1.normalize(`${CWD}/${FILE}`))) {
        return [];
    }
    const { default: fn } = await Promise.resolve().then(() => tslib_1.__importStar(require(path_1.normalize(`${CWD}/${FILE}`))));
    return fn();
};
exports.getPagesTemplate = async (paths) => paths
    .map(async (path) => (Object.assign({ name: path.split('/').pop(), path: path.replace('pages', 'dist').replace('.js', '.html'), dynamic: path.includes('_') }, await Promise.resolve().then(() => tslib_1.__importStar(require(path_1.normalize(`${CWD}/${path}`)))))));
exports.getPages = async () => {
    const paths = await exports.getPagesPaths();
    const routes = await exports.getRoutes();
    const templates = await exports.getPagesTemplate(paths);
    const dynamicRoutes = await routes;
    const resolvedTemplates = await Promise.all(templates);
    const dynamicTemplates = dynamicRoutes.map((route) => {
        const [, ...routePaths] = route.path.split('/');
        const [pageName, ...urlPaths] = routePaths.reverse();
        const createURLPath = urlPaths.reverse().join('/');
        // @ts-ignore
        const _a = resolvedTemplates
            .find((template) => template.dynamic && template.path.includes(createURLPath)), { path } = _a, otherValues = tslib_1.__rest(_a, ["path"]);
        return Object.assign({ path: path.replace('_', `${pageName}/`), route }, otherValues);
    });
    return [...dynamicTemplates, ...resolvedTemplates.filter((template) => !template.dynamic)];
};
exports.default = exports.getPages;
